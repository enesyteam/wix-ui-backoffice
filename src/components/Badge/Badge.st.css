:import {
  -st-from: "wix-ui-core/index.st.css";
  -st-named: Badge, BadgeStyle;
}

:import {
  -st-from: "../StylableUIText/UIText.st.css";
  -st-default: UIText;
}

:import {
  -st-from: "../../palette.st.css";
  -st-named: secondaryText, primaryLightText, mainHover, danger, success, placeholderText, warning, urgent, mainMuted, successMutedHover, backgroundSecondary, dangerMutedHover;
}

.root {
  -st-extends: Badge;
  -st-states: skin(string), type(string);
}

.root >:not(:last-child) {
  margin-right: 6px;
}

.prefix, .suffix {
  width: 12px;
  height: 12px;
  fill: currentColor;
}

.text {
  -st-extends: UIText;
  color: currentColor;
}

/* type = transparent */
.root:type(transparent):skin(general) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(secondaryText)
  );
}

.root:type(transparent):skin(standard) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(mainHover)
  );
}

.root:type(transparent):skin(danger) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(danger)
  );
}

.root:type(transparent):skin(success) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(success)
  );
}

.root:type(transparent):skin(neutral) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(placeholderText)
  );
}

.root:type(transparent):skin(warning) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(warning)
  );
}

.root:type(transparent):skin(urgent) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(urgent)
  );
}

.root:type(transparent):skin(neutralStandard) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(mainMuted)
  );
}

.root:type(transparent):skin(neutralSuccess) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(successMutedHover)
  );
}

.root:type(transparent):skin(neutralDanger) {
  -st-mixin: BadgeStyle(
    backgroundColor transparent,
    borderColor transparent,
    color value(dangerMutedHover)
  );
}

/* type = solid */
.root:type(solid):skin(general) {
  -st-mixin: BadgeStyle(
    backgroundColor value(secondaryText),
    borderColor value(secondaryText),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(standard) {
  -st-mixin: BadgeStyle(
    backgroundColor value(mainHover),
    borderColor value(mainHover),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(danger) {
  -st-mixin: BadgeStyle(
    backgroundColor value(danger),
    borderColor value(danger),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(success) {
  -st-mixin: BadgeStyle(
    backgroundColor value(success),
    borderColor value(success),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(neutral) {
  -st-mixin: BadgeStyle(
    backgroundColor value(placeholderText),
    borderColor value(placeholderText),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(warning) {
  -st-mixin: BadgeStyle(
    backgroundColor value(warning),
    borderColor value(warning),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(urgent) {
  -st-mixin: BadgeStyle(
    backgroundColor value(urgent),
    borderColor value(urgent),
    color value(primaryLightText)
  );
}

.root:type(solid):skin(neutralStandard) {
  -st-mixin: BadgeStyle(
    backgroundColor value(mainMuted),
    borderColor value(mainMuted),
    color value(secondaryText)
  );
}

.root:type(solid):skin(neutralSuccess) {
  -st-mixin: BadgeStyle(
    backgroundColor value(successMutedHover),
    borderColor value(successMutedHover),
    color value(secondaryText)
  );
}

.root:type(solid):skin(neutralDanger) {
  -st-mixin: BadgeStyle(
    backgroundColor value(dangerMutedHover),
    borderColor value(dangerMutedHover),
    color value(secondaryText)
  );
}


/* type = outlined */
.root:type(outlined):skin(general) {
  -st-mixin: BadgeStyle(
    borderColor value(secondaryText),
    backgroundColor value(backgroundSecondary),
    color value(secondaryText)
  );
}

.root:type(outlined):skin(standard) {
  -st-mixin: BadgeStyle(
    borderColor value(mainHover),
    backgroundColor value(backgroundSecondary),
    color value(mainHover)
  );
}

.root:type(outlined):skin(danger) {
  -st-mixin: BadgeStyle(
    borderColor value(danger),
    backgroundColor value(backgroundSecondary),
    color value(danger)
  );
}

.root:type(outlined):skin(success) {
  -st-mixin: BadgeStyle(
    borderColor value(success),
    backgroundColor value(backgroundSecondary),
    color value(success)
  );
}

.root:type(outlined):skin(neutral) {
  -st-mixin: BadgeStyle(
    borderColor value(placeholderText),
    backgroundColor value(backgroundSecondary),
    color value(placeholderText)
  );
}

.root:type(outlined):skin(warning) {
  -st-mixin: BadgeStyle(
    borderColor value(warning),
    backgroundColor value(backgroundSecondary),
    color value(warning)
  );
}

.root:type(outlined):skin(urgent) {
  -st-mixin: BadgeStyle(
    borderColor value(urgent),
    backgroundColor value(backgroundSecondary),
    color value(urgent)
  );
}

.root:type(outlined):skin(neutralStandard) {
  -st-mixin: BadgeStyle(
    borderColor value(mainMuted),
    backgroundColor value(backgroundSecondary),
    color value(secondaryText)
  );
}

.root:type(outlined):skin(neutralSuccess) {
  -st-mixin: BadgeStyle(
    borderColor value(successMutedHover),
    backgroundColor value(backgroundSecondary),
    color value(secondaryText)
  );
}

.root:type(outlined):skin(neutralDanger) {
  -st-mixin: BadgeStyle(
    borderColor value(dangerMutedHover),
    backgroundColor value(backgroundSecondary),
    color value(secondaryText)
  );
}
